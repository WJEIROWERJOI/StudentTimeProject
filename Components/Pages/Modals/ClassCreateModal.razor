@inject StudentService studentService

<div class="form-group">

    <EditForm Model="input" OnValidSubmit="Close">

        <div class="form-floating mb-3">
            <InputText @bind-Value="input.Name" class="form-control" placeholder="학생이름" />
            <label>반 이름</label>
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="input.Description" class="form-control" placeholder="Description" />
            <label>반 설명</label>
        </div>

        <button type="submit" class="btn btn-primary mt-3">OK</button>
        <button type="button" @onclick="Cancel" class="btn btn-secondary mt-3">Cancel</button>
    </EditForm>

</div>


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [SupplyParameterFromForm]
    InputModel input { get; set; } = new();

    protected sealed class InputModel
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    async Task Close()
    {
        try
        {
            await studentService.CreateClass(input.Name, input.Description);
            await BlazoredModal.CloseAsync(ModalResult.Ok(true));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await BlazoredModal.CancelAsync();
        }
    }
    async Task Cancel() => await BlazoredModal.CancelAsync();
}


