@page "/TimeTable/Student"

@inject IToastService toastService
@inject IModalService modalService
@inject StudentService studentService
@inject NavigationManager nav


<PageTitle>StudentList</PageTitle>
<h3>🎓StudentList</h3>
<hr />

<button class="btn btn-primary" type="button" @onclick="StudentCreateModal">학생 등록</button>
<br />

<div stlye="display:flex; justify-content:flex-start;" class="mt-3">
    <div class="input-group" style="width: max-content;">
        <InputSelect @bind-Value="@searchTopic" class="form-select form-select-sm">
            <option value="">-</option>
            <option value="Name">Name</option>
            <option value="StudentGrade">StudentGrade</option>
            <option value="ClassId">StudentClass</option>
        </InputSelect>
        @if (searchTopic is "StudentGrade")
        {
            <InputSelect @bind-Value="@searchContent" class="form-select form-select-sm">
                <option value="">-</option>
                @foreach (var group in Enum.GetValues(typeof(StudentGrade)))
                {
                    <option value="@group">@group</option>
                }
            </InputSelect>
        }
        else if (searchTopic is "ClassId")
        {
            <InputSelect @bind-Value="@searchContent" class="form-select form-select-sm">
                <option value="">-</option>
                @foreach (var item in classes)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </InputSelect>
        }
        else
        {
            <InputText @bind-Value="@searchContent" class="form-control form-control-sm" />
        }

        <button type="button" @onclick="StartSearch" class="btn btn-secondary">검색</button>
        <button type="button" @onclick="CancelSearch" class="btn btn-secondary border-start-1">취소</button>

    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public string? searchTopic { get; set; }
    [SupplyParameterFromQuery]
    public string? searchContent { get; set; }
    private void StartSearch()
    {
        nav.NavigateTo($"/TimeTable/Student?searchTopic={searchTopic}&searchContent={searchContent}", forceLoad: true);
    }

    private void CancelSearch()
    {
        searchContent = "";
        nav.NavigateTo($"/TimeTable/Student?");
    }
}


@if (students is null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive d-flex justify-content-between align-items-center mb-3 mt-3">
        <table class="table table-striped table-bordered table-hover align-middle text-center">
            <thead class="table-dark">
                <tr>
                    <th scope="col">학생이름</th>
                    <th scope="col">학년</th>
                    <th scope="col">반</th>
                    <th scope="col">설명</th>
                    <th scope="col">버튼</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var student in students)
                {
                    <tr @ondblclick="() => DetailStudentModal(student)">

                        <td>@student.Name</td>
                        <td>@student.StudentGrade.ToString()</td>
                        <td>@student.Class?.Name</td>
                        <td>@student.Description</td>
                        <td>
                            <button class="btn btn-outline-danger btn-sm" @onclick:stopPropagation
                                @onclick="() => DeleteStudent(student.Id)">
                                삭제
                            </button>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

@code {
    List<Student> students = new();
    List<StudentClass> classes = new();
    protected override async Task OnInitializedAsync()
    {
        var result = await studentService.GetAllClassAsync();
        if (result.Success && result.Data is not null)
        {
            classes = result.Data;
        }
        else
        {
            toastService.ShowError(result.Message!);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await InitialDatabring();
    }

    async Task StudentCreateModal()
    {
        var modal = modalService.Show<StudentCreateModal>("Create Student");
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data is bool success)
            {
                await InitialDatabring();
                toastService.ShowSuccess("학생 생성!");
            }
        }
    }
    async Task DetailStudentModal(Student student)
    {
        var parameter = new ModalParameters();
        parameter.Add(nameof(StudentDetailModal.student), student);
        var options = new ModalOptions { HideCloseButton = true, DisableBackgroundCancel = true };
        var modal = modalService.Show<StudentDetailModal>("Detail Student", parameter, options);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data is bool success)
            {
                toastService.ShowSuccess("학생 관리 완료");
            }
        }
    }
    async Task DeleteStudent(int id)
    {
        var modal = modalService.Show<ConfirmModal>();
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            if (result.Data is bool success)
            {
                if ((await studentService.DeleteStudentAsync(id)).Success)
                {
                    await InitialDatabring();
                    toastService.ShowSuccess("삭제 성공!");
                }
                else
                {
                    toastService.ShowError("삭제 실패!");
                }
            }
        }
    }

    async Task InitialDatabring()
    {
        Result<List<Student>> result;
        if (string.IsNullOrWhiteSpace(searchTopic) || string.IsNullOrWhiteSpace(searchContent))
        {
            result = await studentService.GetAllStudentsAsync();
        }
        else
        {
            result = await studentService.SearchStudentsAsync(searchTopic, searchContent);
        }

        if (result.Success && result.Data is not null)
        {
            students = result.Data.OrderByDescending(s => s.CreatedAt).ToList();
        }
        else
        {
            toastService.ShowError(result.Message!);
        }
    }


}
